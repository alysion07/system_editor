/**
 * @fileoverview gRPC-Web generated client stub for task
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: task_manager.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')
const proto = {};
proto.task = require('./task_manager_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.task.TaskManagerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @constructor
 * @struct
 * @final
 */
proto.task.TaskManagerPromiseClient =
    function (hostname) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.TaskArgs,
 *   !proto.task.TaskId>}
 */
const methodDescriptor_TaskManager_start_task = new grpc.web.MethodDescriptor(
  '/task.TaskManager_backup/start_task',
  grpc.web.MethodType.UNARY,
  proto.task.TaskArgs,
  proto.task.TaskId,
  /**
   * @param {!proto.task.TaskArgs} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.task.TaskId.deserializeBinary
);


/**
 * @param {!proto.task.TaskArgs} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.task.TaskId)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.task.TaskId>|undefined}
 *     The XHR Node Readable Stream
 */
proto.task.TaskManagerClient.prototype.start_task =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/task.TaskManager_backup/start_task',
      request,
      metadata || {},
      methodDescriptor_TaskManager_start_task,
      callback);
};


/**
 * @param {!proto.task.TaskArgs} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.task.TaskId>}
 *     Promise that resolves to the response
 */
proto.task.TaskManagerPromiseClient.prototype.start_task =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/task.TaskManager_backup/start_task',
      request,
      metadata || {},
      methodDescriptor_TaskManager_start_task);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.TaskId,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_TaskManager_stop_task = new grpc.web.MethodDescriptor(
  '/task.TaskManager_backup/stop_task',
  grpc.web.MethodType.UNARY,
  proto.task.TaskId,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.task.TaskId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.task.TaskId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.task.TaskManagerClient.prototype.stop_task =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/task.TaskManager_backup/stop_task',
      request,
      metadata || {},
      methodDescriptor_TaskManager_stop_task,
      callback);
};


/**
 * @param {!proto.task.TaskId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.task.TaskManagerPromiseClient.prototype.stop_task =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/task.TaskManager_backup/stop_task',
      request,
      metadata || {},
      methodDescriptor_TaskManager_stop_task);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.task.LogMessage>}
 */
const methodDescriptor_TaskManager_get_eol = new grpc.web.MethodDescriptor(
  '/task.TaskManager_backup/get_eol',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  proto.task.LogMessage,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.task.LogMessage.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.task.LogMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.task.LogMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.task.TaskManagerClient.prototype.get_eol =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/task.TaskManager_backup/get_eol',
      request,
      metadata || {},
      methodDescriptor_TaskManager_get_eol,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.task.LogMessage>}
 *     Promise that resolves to the response
 */
proto.task.TaskManagerPromiseClient.prototype.get_eol =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/task.TaskManager_backup/get_eol',
      request,
      metadata || {},
      methodDescriptor_TaskManager_get_eol);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.TaskId,
 *   !proto.task.LogMessage>}
 */
const methodDescriptor_TaskManager_download_plot_log = new grpc.web.MethodDescriptor(
  '/task.TaskManager_backup/download_plot_log',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.task.TaskId,
  proto.task.LogMessage,
  /**
   * @param {!proto.task.TaskId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.task.LogMessage.deserializeBinary
);


/**
 * @param {!proto.task.TaskId} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.task.LogMessage>}
 *     The XHR Node Readable Stream
 */
proto.task.TaskManagerClient.prototype.download_plot_log =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/task.TaskManager_backup/download_plot_log',
      request,
      metadata || {},
      methodDescriptor_TaskManager_download_plot_log);
};


/**
 * @param {!proto.task.TaskId} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.task.LogMessage>}
 *     The XHR Node Readable Stream
 */
proto.task.TaskManagerPromiseClient.prototype.download_plot_log =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/task.TaskManager_backup/download_plot_log',
      request,
      metadata || {},
      methodDescriptor_TaskManager_download_plot_log);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.TaskId,
 *   !proto.task.LogMessage>}
 */
const methodDescriptor_TaskManager_get_plot_log = new grpc.web.MethodDescriptor(
  '/task.TaskManager_backup/get_plot_log',
  grpc.web.MethodType.UNARY,
  proto.task.TaskId,
  proto.task.LogMessage,
  /**
   * @param {!proto.task.TaskId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.task.LogMessage.deserializeBinary
);


/**
 * @param {!proto.task.TaskId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.task.LogMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.task.LogMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.task.TaskManagerClient.prototype.get_plot_log =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/task.TaskManager_backup/get_plot_log',
      request,
      metadata || {},
      methodDescriptor_TaskManager_get_plot_log,
      callback);
};


/**
 * @param {!proto.task.TaskId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.task.LogMessage>}
 *     Promise that resolves to the response
 */
proto.task.TaskManagerPromiseClient.prototype.get_plot_log =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/task.TaskManager_backup/get_plot_log',
      request,
      metadata || {},
      methodDescriptor_TaskManager_get_plot_log);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.TaskId,
 *   !proto.task.LogMessage>}
 */
const methodDescriptor_TaskManager_download_screen_log = new grpc.web.MethodDescriptor(
  '/task.TaskManager_backup/download_screen_log',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.task.TaskId,
  proto.task.LogMessage,
  /**
   * @param {!proto.task.TaskId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.task.LogMessage.deserializeBinary
);


/**
 * @param {!proto.task.TaskId} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.task.LogMessage>}
 *     The XHR Node Readable Stream
 */
proto.task.TaskManagerClient.prototype.download_screen_log =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/task.TaskManager_backup/download_screen_log',
      request,
      metadata || {},
      methodDescriptor_TaskManager_download_screen_log);
};


/**
 * @param {!proto.task.TaskId} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.task.LogMessage>}
 *     The XHR Node Readable Stream
 */
proto.task.TaskManagerPromiseClient.prototype.download_screen_log =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/task.TaskManager_backup/download_screen_log',
      request,
      metadata || {},
      methodDescriptor_TaskManager_download_screen_log);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.TaskId,
 *   !proto.task.LogMessage>}
 */
const methodDescriptor_TaskManager_get_screen_log = new grpc.web.MethodDescriptor(
  '/task.TaskManager_backup/get_screen_log',
  grpc.web.MethodType.UNARY,
  proto.task.TaskId,
  proto.task.LogMessage,
  /**
   * @param {!proto.task.TaskId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.task.LogMessage.deserializeBinary
);


/**
 * @param {!proto.task.TaskId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.task.LogMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.task.LogMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.task.TaskManagerClient.prototype.get_screen_log =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/task.TaskManager_backup/get_screen_log',
      request,
      metadata || {},
      methodDescriptor_TaskManager_get_screen_log,
      callback);
};


/**
 * @param {!proto.task.TaskId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.task.LogMessage>}
 *     Promise that resolves to the response
 */
proto.task.TaskManagerPromiseClient.prototype.get_screen_log =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/task.TaskManager_backup/get_screen_log',
      request,
      metadata || {},
      methodDescriptor_TaskManager_get_screen_log);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.task.TaskLog,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_TaskManager_upload_screen_log = new grpc.web.MethodDescriptor(
  '/task.TaskManager_backup/upload_screen_log',
  grpc.web.MethodType.UNARY,
  proto.task.TaskLog,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.task.TaskLog} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.task.TaskLog} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.task.TaskManagerClient.prototype.upload_screen_log =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/task.TaskManager_backup/upload_screen_log',
      request,
      metadata || {},
      methodDescriptor_TaskManager_upload_screen_log,
      callback);
};


/**
 * @param {!proto.task.TaskLog} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.task.TaskManagerPromiseClient.prototype.upload_screen_log =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/task.TaskManager_backup/upload_screen_log',
      request,
      metadata || {},
      methodDescriptor_TaskManager_upload_screen_log);
};


module.exports = proto.task;

